plugins {
    id 'java'
    id 'com.vanniktech.maven.publish' version '0.34.0'
    id 'dev.rafandoo.versioning' version '1.0.0'
}

group = 'dev.rafandoo'
version = versioning.name

ext.defaultManifestAttributes = { Project p ->
    return [
        'Manifest-Version'      : '1.0',
        'Specification-Version' : p.version,
        'Specification-Vendor'  : 'R+ Dev',
        'Implementation-Version': p.version,
        'Implementation-Vendor' : 'R+ Dev',
        'Built-Date'            : new Date().toString(),
        'Built-JDK'             : System.getProperty('java.version'),
        'Built-OS'              : System.getProperty('os.name'),
        'Built-OS-Version'      : System.getProperty('os.version'),
        'Built-OS-Architecture' : System.getProperty('os.arch')
    ]
}

ext.configurePom = { MavenPublication pub ->
    pub.pom {
        name.set(pub.artifactId)
        description.set('Coffee Utilities Package (CUP) is a Java library that provides a set of utilities for Java developers.')
        url.set('https://github.com/rafandoo/cup')

        licenses {
            license {
                name.set('Apache License, Version 2.0')
                url.set('https://raw.githubusercontent.com/rafandoo/cup/refs/heads/main/LICENSE')
                distribution.set('repo')
            }
        }

        developers {
            developer {
                id.set('rafandoo')
                name.set('Rafael Camargo')
                email.set('rafaelcamargo.inf@gmail.com')
            }
        }

        scm {
            connection.set('scm:git:git://github.com/rafandoo/cup.git')
            developerConnection.set('scm:git:ssh://git@github.com/rafandoo/cup.git')
            url.set('https://github.com/rafandoo/cup')
            tag.set('HEAD')
        }

        issueManagement {
            system.set('GitHub Issues')
            url.set('https://github.com/rafandoo/cup/issues')
        }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'com.vanniktech.maven.publish'

    group = rootProject.group
    version = rootProject.version

    repositories {
        mavenLocal()
        mavenCentral()
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    javadoc {
        options.addStringOption('Xdoclint:none', '-quiet')
    }

    compileJava {
        options.encoding = 'UTF-8'
        options.compilerArgs << '-parameters'
    }

    test {
        useJUnitPlatform()
    }

    layout.buildDirectory.set(new File("$projectDir/build"))

    dependencies {
        implementation 'org.slf4j:slf4j-api:2.0.17'

        compileOnly("org.projectlombok:lombok:1.18.42")
        annotationProcessor("org.projectlombok:lombok:1.18.42")

        testCompileOnly("org.projectlombok:lombok:1.18.42")
        testAnnotationProcessor("org.projectlombok:lombok:1.18.42")
    }

    tasks.withType(Jar).configureEach {
        manifest {
            attributes defaultManifestAttributes(project) + [
                'Specification-Title' : "Coffee Utilities Package - ${project.name.replace('cup-', '').toUpperCase()}",
                'Implementation-Title': "Coffee Utilities Package - ${project.name.replace('cup-', '').toUpperCase()}"
            ]
        }
        exclude '**/.gitkeep'
    }

    plugins.withId('com.vanniktech.maven.publish') {
        publishing {
            publications.withType(MavenPublication).configureEach { pub -> configurePom(pub) }
        }
    }

    mavenPublishing {
        publishToMavenCentral()
        signAllPublications()
    }
}

tasks.register('aggregateJavadoc', Javadoc) {
    group = 'Documentation'
    description = 'Generates aggregate Javadoc for all Java subprojects.'

    dependsOn subprojects.collect { it.tasks.matching { t -> t.name == 'classes' } }

    def javaSubprojects = subprojects.findAll { it.plugins.hasPlugin('java') }

    source javaSubprojects.collect { it.sourceSets.main.allJava }

    classpath = files(javaSubprojects.collect { it.sourceSets.main.compileClasspath })

    destinationDir = file("${rootProject.buildDir}/docs/javadoc")

    options.encoding = 'UTF-8'
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('charset', 'UTF-8')
    options.docTitle = "Coffee Utilities Package (CUP) API"
    options.windowTitle = "CUP API Documentation"
}


tasks.register('fatJar', Jar) {
    group = 'build'
    description = 'Builds a JAR with dependencies (Fat Jar).'

    archiveBaseName.set('cup')
    archiveVersion.set(project.version.toString())
    archiveClassifier.set('aio')

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes defaultManifestAttributes(project) + [
            'Specification-Title' : "Coffee Utilities Package",
            'Implementation-Title': "Coffee Utilities Package"
        ]
    }

    dependsOn subprojects.collect { it.tasks.named('classes') }

    from {
        subprojects.collect { it.sourceSets.main.output }
    }

    dependsOn subprojects.collect { it.configurations.runtimeClasspath }
    from {
        subprojects.collectMany { subproject ->
            subproject.configurations.runtimeClasspath.findAll {
                it.name.endsWith('.jar')
            }.collect { zipTree(it) }
        }
    }

    destinationDirectory.set(file("$rootDir/artifacts"))
}

tasks.register('exportToRawMaven', Copy) {
    group = 'publishing'
    description = 'Exports all subprojects to a local Maven repository.'

    dependsOn subprojects.collect { it.tasks.named('publishToMavenLocal') }

    def localMaven = new File(System.getProperty("user.home"), ".m2/repository/dev/rafandoo")

    from localMaven
    into "$layout.buildDirectory/raw-mvn-repo/dev/rafandoo"
}

